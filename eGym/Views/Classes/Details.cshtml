@using System.Security.Claims;
@model eGym.Models.DetailsClassesModel
@{
    ViewData["Title"] = "Classes details";
    bool Admin = User.IsInRole("admin");
    bool Employee = User.IsInRole("employee");
    bool Client = User.IsInRole("client");
}
<center><h1 class="display-4">Classes details</h1></center>
<hr />
<br />
<div class="row justify-content-center">
    <dl class="col-md-4">
        <dt class="col-sm-2">
            <label>Name</label>
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Classes.Name)
        </dd>
        <dt class="col-sm-2">
            <label>Gym</label>
        </dt>
        <dd class="col-sm-10">
            @{
                var selectedGym = (ViewBag.GymList as SelectList)?.FirstOrDefault(g =>
                {
                    return g.Value == Model.Classes.GymId.ToString();
                });
                var selectedGymName = selectedGym?.Text;
            }
            @selectedGymName
        </dd>
        <dt class="col-sm-2">
            <label>Trainer</label>
        </dt>
        <dd class="col-sm-10">
            @{
                var selectedUser = (ViewBag.Users as SelectList)?.FirstOrDefault(u =>
                {
                    return u.Value == Model.Classes.EmployeeId;
                });
                var selectedUserName = selectedUser?.Text;
            }
            @selectedUserName
        </dd>
        <dt class="col-sm-2">
            <label>Number of people</label>
        </dt>
        <dd class="col-sm-10">@(ViewBag.PeopleCount.ContainsKey(Model.Classes.Id) ? ViewBag.PeopleCount[Model.Classes.Id] : 0)/@Html.DisplayFor(model => model.Classes.NumberOfPeople)</dd>
        <dt class="col-sm-2">
            <label>Price</label>
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Classes.Price) zł
        </dd>
        <dt class="col-sm-2">
            <label>Start date</label>
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Classes.StartDate)
        </dd>
        <dt class="col-sm-2">
            <label>End date</label>
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Classes.EndDate)
        </dd>
    </dl>
</div>
<div class="form-group text-center">
    @if ((Employee && Model.Classes.GymId == ViewBag.IdGym) || Admin)
{
    <a href="/Classes/MyClassesList?id=@Html.DisplayFor(model => model.Classes.EmployeeId)" class="btn btn-dark">Trainer's Classes</a>
}
    <a href="/Classes/GymsClassesList?id=@Html.DisplayFor(model => model.Classes.GymId)" class="btn btn-primary">Gym's Classes</a>
    @if (Employee && Model.Classes.GymId == ViewBag.IdGym && Model.Classes.StartDate > DateTime.Now)
    {
        var numberOfPeople = Model.Classes.NumberOfPeople;

        @if ((ViewBag.PeopleCount.ContainsKey(Model.Classes.Id) ? ViewBag.PeopleCount[Model.Classes.Id] : 0) < numberOfPeople)
        {
            <a href="/Classes/ReserveAdmin?id=@Html.DisplayFor(model => model.Classes.Id)" class="btn btn-success">Add client to classes</a>
        }
    }
</div>
@if ((Employee && Model.Classes.GymId == ViewBag.IdGym) || Admin)
{
    <br />
    <br />
    <div class="row">
        <div class="text-center">
            <center><h1 class="display-4">List of reserved clients</h1></center>
        </div>
        <div class="table-responsive">
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Reservation Id</th>
                    <th>Client</th>
                    <th>Date of reservation</th>
                    <th>Payment date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ClassesUser)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Id)</td>
                        <td>
                            @{
                                var selectedUser1 = (ViewBag.Users as SelectList)?.FirstOrDefault(u =>
                                {
                                    return u.Value == item.UserId;
                                });
                                var selectedUserName1 = selectedUser1?.Text;
                                if (selectedUserName1==null)
                                {
                                    selectedUserName1 = "Default";
                                }
                            }
                            @selectedUserName1
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.DateOfReservation)</td>
                        <td>
                            @if (item.PaymentDate == null)
                            {
                            
                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => item.PaymentDate)
                            }
                        </td>
                        <td>
                            @if (!Admin && item.PaymentDate == null)
                            {
                                <a href="/Classes/Pay?id=@item.Id" class="btn btn-warning">Mark as paid</a>
                            }
                            @if (item.PaymentDate == null)
                            {
                            <a onclick="return window.confirm('Are you sure you want to delete the specified record?')" href="/Classes/DeleteUser?id=@item.Id" class="btn btn-danger">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
}
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}