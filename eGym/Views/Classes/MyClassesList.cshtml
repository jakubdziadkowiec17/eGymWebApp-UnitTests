@using System.Security.Claims;
@model MyClassesClientModel
@{
    ViewData["Title"] = @ViewBag.Title1;
    bool Employee = User.IsInRole("employee");
    bool Admin = User.IsInRole("admin");
    bool Client = User.IsInRole("client");
}
<div class="row">
<div class="text-center">
        <h1 class="display-3">@ViewBag.Title1</h1>
</div>
<br />
<br />
    <br />
    <br />
    @if (Employee && ViewBag.id1 == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
    {
        <p>
            <a class="btn btn-success btn-lg" asp-action="Add">Create</a>
        </p>
        <br />
    }
    @if (Employee || Admin || Client)
    {
        <div class="form-group">
            <input type="text" class="form-control" id="search" placeholder="Enter name or gym">
        </div>
        <br />
        <br />
    }
    <div class="table-responsive">
    <table class="table table-striped">
    <thead>
        <tr>
                @if (Client)
                {
                    <th>Reservation Id</th>
                }
                <th>Name</th>
                <th>Gym</th>
                <th>Trainer</th>
                <th>Number of people</th>
                <th>Price</th>
                <th>Start date</th>
                <th>End date</th>
                        @if (Client)
                        {
                         <th>Client</th>
                         <th>DateOfReservation</th>
                         <th>Paid</th>
                         <th>Payment date</th>
                        }
                <th>Action</th>
        </tr>
    </thead>
    <tbody>
            @if (Admin || Employee)
            {
                @foreach (var item in Model.Classes)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Name)</td>
                        <td>
                            @{
                                var selectedGym = (ViewBag.GymList as SelectList)?.FirstOrDefault(g =>
                                {
                                    int gymId;
                                    return int.TryParse(g.Value, out gymId) && gymId == item.GymId;
                                });
                                var selectedGymName = selectedGym?.Text;
                            }
                            @selectedGymName
                        </td>
                        <td>
                            @{
                                var selectedUser = (ViewBag.Users as SelectList)?.FirstOrDefault(u =>
                                {
                                    return u.Value == item.EmployeeId;
                                });
                                var selectedUserName = selectedUser?.Text;
                            }
                            @selectedUserName
                        </td>
                        <td>@(ViewBag.PeopleCount.ContainsKey(item.Id) ? ViewBag.PeopleCount[item.Id] : 0)/@Html.DisplayFor(modelItem => item.NumberOfPeople)</td>
                        <td>@Html.DisplayFor(modelItem => item.Price) zł</td>
                        <td>@Html.DisplayFor(modelItem => item.StartDate)</td>
                        <td>@Html.DisplayFor(modelItem => item.EndDate)</td>
                        <td>
                            <a href="/Classes/Details?id=@item.Id" class="btn btn-primary">Details</a>
                            @if (Employee && item.EmployeeId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value && item.StartDate>DateTime.Now)
                            {
                                <a href="/Classes/Edit?id=@item.Id" class="btn btn-warning">Edit</a>
                            }
                            @if ((Employee && item.EmployeeId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value || Admin) && item.StartDate > DateTime.Now)
                            {
                                @if ((ViewBag.PeopleCount.ContainsKey(item.Id) ? ViewBag.PeopleCount[item.Id] : 0) == 0)
                                {
                                <a onclick="return window.confirm('Are you sure you want to delete the specified record?')" href="/Classes/Delete?id=@item.Id" class="btn btn-danger">Delete</a>
                                }
                            }
                        </td>
                    </tr>
                }
            }
        @if (Client)
            {
                @foreach (var item in Model.ClassesUser)
                {
                    var relatedClass = Model.Classes.FirstOrDefault(c => c.Id == item.ClassesId);

                    if (relatedClass != null)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => item.Id)</td>
                            <td>@Html.DisplayFor(modelItem => relatedClass.Name)</td>
                            <td>
                                @{
                                    var selectedGym1 = (ViewBag.GymList as SelectList)?.FirstOrDefault(g =>
                                    {
                                        int gymId;
                                        return int.TryParse(g.Value, out gymId) && gymId == relatedClass.GymId;
                                    });
                                    var selectedGymName1 = selectedGym1?.Text;
                                }
                                @selectedGymName1
                            </td>
                            <td>
                                @{
                                    var selectedUser = (ViewBag.Users as SelectList)?.FirstOrDefault(u =>
                                    {
                                        return u.Value == relatedClass.EmployeeId;
                                    });
                                    var selectedUserName = selectedUser?.Text;
                                }
                                @selectedUserName
                            </td>
                            <td>@(ViewBag.PeopleCount.ContainsKey(relatedClass.Id) ? ViewBag.PeopleCount[relatedClass.Id] : 0)/@Html.DisplayFor(modelItem => relatedClass.NumberOfPeople)</td>
                            <td>@Html.DisplayFor(modelItem => relatedClass.Price) zł</td>
                            <td>@Html.DisplayFor(modelItem => relatedClass.StartDate)</td>
                            <td>@Html.DisplayFor(modelItem => relatedClass.EndDate)</td>
                            <td>
                                @{
                                    var selectedUser2 = (ViewBag.Users as SelectList)?.FirstOrDefault(u =>
                                    {
                                        return u.Value == item.UserId;
                                    });
                                    var selectedUserName2 = selectedUser2?.Text;
                                }
                                @selectedUserName2
                            </td>
                            <td>@Html.DisplayFor(modelItem => item.DateOfReservation)</td>
                            <td>
                                @if (item.PaymentDate != null)
                                {
                                    <span>Yes</span>
                                }
                                else
                                {
                                    <span>No</span>
                                }
                            </td>
                            <td>@Html.DisplayFor(modelItem => item.PaymentDate)</td>
                            <td>
                                <a href="/Classes/Details?id=@relatedClass.Id" class="btn btn-primary">Classes details</a>
                                @if (item.PaymentDate == null && relatedClass.StartDate > DateTime.Now && item.UserId == User.FindFirst(ClaimTypes.NameIdentifier)?.Value)
                                {
                                    <a onclick="return window.confirm('Are you sure you want to delete the specified record?')" href="/Classes/DeleteUser?id=@item.Id" class="btn btn-danger">Delete</a>
                                }
                            </td>
                    </tr>
                }
            }
            }
    </tbody>
</table>
</div>
</div>
@section Scripts
    {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {
            $("#search").on("input", function () {
                var searchValue = $(this).val().toLowerCase();
                $("tbody tr").each(function () {
                    var fullName = ($(this).find("td:eq(0)").text() + " " + $(this).find("td:eq(1)").text()).toLowerCase();
                    if (fullName.includes(searchValue)) {
                        $(this).show();
                    }
                    else {
                        $(this).hide();
                    }
                });
            });
        });
    </script>
}